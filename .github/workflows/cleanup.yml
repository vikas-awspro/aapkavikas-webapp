name: 'Cleanup'
on:
  workflow_dispatch:
  
permissions:
  contents: read
env:
  tf_version: 'latest'
  tf_working_dir: '.'  
jobs:
  terraform:
    name: Terraform
    env:
      #AWS Secrests
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEVOPS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEVOPS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: 'Checkout'
      uses: actions/checkout@master

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    #- name: Setup Terraform
    #  uses: hashicorp/setup-terraform@v1
    #  with:
    #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: 'Terraform Init'
    #  run: terraform fmt -check
      uses: hashicorp/terraform-github-actions@master 
      with: 
        tf_actions_version: ${{ env.tf_version }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{ env.tf_working_dir }}
        tf_actions_comment: true   
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: 'Terraform Format'
    #  run: terraform fmt -check
      uses: hashicorp/terraform-github-actions@master 
      with: 
        tf_actions_version: ${{ env.tf_version }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: ${{ env.tf_working_dir }}
        tf_actions_comment: true   
    # Generates an execution plan for Terraform
    - name: 'Terraform Destroy'
    # if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      uses: hashicorp/terraform-github-actions@master 
      with: 
        tf_actions_version: ${{ env.tf_version }}
        tf_actions_subcommand: destroy
        tf_actions_working_dir: ${{ env.tf_working_dir }}
        tf_actions_comment: true       